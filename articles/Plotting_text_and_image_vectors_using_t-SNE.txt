Doing wonders with Visualization

John Micternan rightly pointed out that ‘In presentation lies the true entertainment’, and if you can present your data in a way the other guy wished, he would be in a state of bliss. Imagine a world where communication of all data could be visualized, both my brain and my boss would thank me for the gesture. Vikram Varshney Ayush Gupta . Given the human brain’s comfort when it comes to pictorial content and considering the fact the 90% of the information transmitted through the human brain is visual,we have tried to plot sentence and image vectors in a 2-D space ,where each spatial spot represents a sentence and similar sentence vectors would be placed in spatial proximity.

The Problem Statement:

To plot sentence and image vectors where sentence vectors are arrived at using Infersent or Google’s Universal Sentence Encoder and images vectors are features extracted in the Resnet 50 model.

Our sentences are nothing but a combination of a Product’s Name, description and its specifications whereas an Image is basically the product image. To get a hold of what a product means in the context of Indiamart, please read here.

Understanding Text and Image Vectors

Text vectors (either word vectors or sentence vectors )are created by converting textual data into the numerical form using embedding techniques like word2vec, fasttext, Infersent, Google universal sentence encoder etc. The dimension of your vector may depend upon your technique of preparing it. For example, Infesent creates a vector of 4096 dimensions for each sentence, whereas GUSE(Google Universal Sentence Encoder) creates a vector of 512 dimensions for each sentence.

Image vectors are the feature vector of an image created using some image feature extraction techniques. In our case, we have Resnet image vectors having 512 dimensions for each and every image.

Note: In this post, we are not dwelling into details of a sentence or word embedding (they will be covered separately in another blog), rather the focus is how we depicted them on a scatter plot.

Going Multidimensional and Coming Back

The difficulty with visualizing the distributed representation of text and image feature vectors is that they are multidimensional(for e.g some vectors are 512 dimensional whereas some are of 4096 dimensions) which are quite higher than the usual 2 or 3-dimensional vector plots that human can see and interpret.

Since there are no direct ways to project these data points on the plot that is easy for humans to understand, we need some powerful method to map these high dimensional data into 2 or 3-dimensional space. Here t-SNE played the trick for us.

The below images shows how each vector was converted to a 2-D Array for ease of plotting.

Multidimensional Vectors converted to a two-dimensional vector using t-SNE.

What is t-SNE?

t-SNE stands for t-distributed stochastic neighbor embedding. It is a technique for dimensionality reduction that is best suited for the visualization of high dimensional data-set. t-SNE is a randomized algorithm, i;e every time we run the algorithm it returns slightly different results on the same data-set. To control this we set a random state with some arbitrary value. Random state is used here to seed the cost function of the algorithm.