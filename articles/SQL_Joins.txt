SQL Joins

SQL can be a little intimidating when you’ve never used it before. You’ll hear people talking about complex joins between tables and have no idea what they are talking about. I’ve taught many people how to write SQL queries over the last few years and figured I could share some of that knowledge with the masses on the internet.

First of all, what is a join?

In relational databases, tables can connect to one another if they share a key. A primary key is a value that cannot be duplicated within a table. This means that one value can only be seen once within the primary key column. That same key can exist as a foreign key in another table which creates the relationship. A foreign key can have duplicate instances within a table.

ERD example for relationships below

Table Relationships

The types of relationships between tables are one-to-one, one-to-many, and many-to-many.

One-to-One would be something like having a customer table and a SSN table. One customer can only have one SSN and one SSN can only be assigned to one person. They primary key on the Customer table is CustomerId and it is the foreign key on the SSN table.

One-to-Many would be like having a customer table and an orders table. One customer can have many orders, but the orders can only be associated to one customer. The primary and foreign keys are the same in this example.

Many-to-Many would look something like having an orders table and a products table. An order can have many products on it and a product can be on many orders. These relationships will typically have another table that you’ll need to use to join the main Order and Product tables together. You’ll see in the diagram above that this table is called Product_Order. Both ProductId and OrderId are foreign keys on the Product_Order table, but they are the primary keys in their respective tables.

Types of Joins

There are 4 types of joins: inner, left, right, and full outer. I’ll show you what these would look like with a pretty simple pandas dataframe using the one-to-many example above of the Customer and Order tables, but I’ll also show what the SQL syntax would be.

Using python pandas to create dataframes

Customer table

Order table

As a reminder, the CustomerId is the primary key of the Customer table and it is a foreign key on the Order table. The OrderId is the primary key on the Order table.

Inner Join

An inner join will return rows where the values in the field you are joining on exist in both tables.

Image from dofactory

In SQL, you can use JOIN since it defaults as an inner join. Or you can include INNER JOIN.

In SQL this would be written as:

SELECT *

FROM Customer

JOIN Order ON Customer.CustomerId = Order.CustomerId;

In Pandas you would use the merge function.

pd.merge(Customer, Order, how='inner', on='CustomerId')

The only CustomerId values that exist in the Order table are [1,2,4], so in the results of the inner join, CustomerId [3,5] don’t return.

Left Join

A left join will return all rows from the first table written, Customer in this instance, and only populate the second table’s fields where the key value exists. It will return NULLs (or NaNs in python) where it does not exist in the second table.

Image from dofactory

In SQL, this would be written as:

SELECT *

FROM Customer

LEFT JOIN Order ON Customer.CustomerId = Order.CustomerId;

And with Pandas:

pd.merge(Customer, Order, how='left', on='CustomerId')

With this join, we see all the CustomerIds [1,2,3,4,5], but there are duplicates of these CustomerIds because they have multiple orders. CustomerId [3,5] didn’t have any orders, so the OrderId and OrderDate return a NaN.

Right Join

A right join will return all rows from the second table written, Order in this instance, and only populate the first table’s fields where the key value exists. It will return NULLs (or NaNs in python) where it does not exist in the first table.

Image from dofactory

In SQL, this would be written as:

SELECT *

FROM Customer

RIGHT JOIN Order ON Customer.CustomerId = Order.CustomerId;

And with Pandas:

pd.merge(Customer, Order, how='right', on='CustomerId')

With this join, we see all the orders from the Order table, but since CustomerId 6 doesn’t exist in the Customer table, we’re getting NaN values for Name, Address, and Phone.

Full Outer Join

You’ll also hear this called Outer Join (without the Full) since you don’t have to include FULL in your written SQL.

This will return all rows whether the values in the field you are joining on exist in both tables or not. If the value does not exist in the other table, NULLs will be returned for that table’s fields.

Image from dofactory

In SQL, this would be written as:

SELECT *

FROM Customer

OUTER JOIN Order ON a.col1 = b.col1;

And in Pandas:

pd.merge(Customer, Order, how='outer', on='CustomerId')

The results of this join show all CustomerId’s and all OrderId’s. Where CustomerId is [3,5] the Order fields are NaN and where OrderId is 6, the Customer fields are NaN.

Conclusion

Joins can be really useful in both SQL and Python using pandas dataframes to supplement the data from one table with some from another table. You have to be careful where you’re returning NaN or NULL values, especially when you’re inserting data into a new table that may not allow NULL values. It’s also important to understand the relationships between the tables you are joining so you don’t end up returning results that you aren’t expecting.

I hope this information was helpful and I’m happy to connect and respond to any questions you may have about SQL queries!

Note: I used explicit joins in my written SQL examples, but some people think implicit joins work just as well. In my experience, it’s always safer to use explicit joins because you know exactly what the results will be. Implicit joins don’t always do what you expect.