Dealing with extreme event prediction is a frequent nightmare for every Data Scientist. Looking around I found very interesting resources that deal with this problem. Personally, I literally fall in love with the approach released by Uber Researchers. In their papers (two versions are available here and here) they developed an ML solution for daily future prediction of traveler demand. Their methodology stole my attention for its geniality, good explanation, and easy implementation. So my purpose is to reproduce their discovery in pythonic language. I’m very satisfied with this challenge and in the end, I improved my knowledge of regression forecasting.

The most important takeaways from this post can be summarized as:

Develop a stable approach to evaluate and compare Keras models (avoiding at the same time the problem of weights seed generator);

(avoiding at the same time the problem of weights seed generator); Implement a simple and clever LSTM Autoencoder for new features creation;

for new features creation; Improve forecast prediction performance for time series with easy tricks (see step above);

for time series with easy tricks (see step above); Deal with the nested dataset, i.e. problems where we have observations that belong to different entities (for example time series of different stores/engines/people and so on)… in this sense, we develop only a high-performance model for all!

But Keep Kalm and let’s proceed step by step.

PROBLEM OVERVIEW

At Uber accurate prediction for completed trips (particularly during special events) provides a series of important benefits: more efficient driver allocation resulting in a decreased wait time for the riders, budget planning and other related tasks.

In order to reach high accurate predictions of driver demand for ride-sharing, Uber Researchers developed a high-performance model for time series forecasting. They are able to fit (one-shot) a single model with a lot of heterogeneous time series, coming from different locations/cities. This process permits us to extract relevant time patterns. In the end, they were able to forecast demand, generalizing for different…