So there you are bold adventurer, standing at the entrance to the deep, the dark, the unknown reaches beneath the surface. You have made all the preparations. You’ve filled your bag with useful potions and tools and tonics. You’ve sharpened your blades and bolstered your armor. You’ve steeled your nerves and stepped through the entrance to the most infamous dungeon in the land. You are ready.

… But what if you’re not? Even the boldest of heroes need a backup plan. You should save your game just in case things turn out poorly, or deadly.

And also for you, humble programmer, standing at the beginning of a project, the beginning of a great, unknown continuum of potential futures. You should save your game too, with Git!

Git is a distributed version-control system for tracking changes in source code during software development. It is designed for coordinating work among programmers, but it can be used to track changes in any set of files.

So how does it work? Once you have it installed on your machine (go here to acquire if you don’t have it already) the first step is to create a Git repository. When you build a project on your local machine, you will probably be putting it in some local working directory. a Git repository is just a directory that has been Git enabled.

There are two ways to start a Git repository. the first is to convert an existing directory into a Git repository, this is done with:

$ git init

Which will add a .git file to the directory and allow you to start tracking changes made to your files. The second method is used to clone existing Git repositories:

$ git clone

Cloning repositories from GitHub (a site used to share projects and code) is incredibly common and highly encouraged! Creating an empty project repository on GitHub, then cloning it to your local machine is very normal.

So now lets actually start tracking some changes! In fact, making the repository is a tracked change in itself. Right now your repository looks like this:

Not so impressive right? But let's do a little work on your project. Say you put a few hours into your project, but you’re not sure how to proceed farther. Now is a perfect time to save your work with a git commit. Committing your work is as simple as telling git which files you want to add to the commit:

$ git add <files you want to include in the commit>

Add any files that you’ve made changes too, or if you’re not sure which files have been changed, use:

$ git status

Files that have been modified will come up in red. Once you’ve decided which files to add to the commit, use:

$ git commit -m "Left a commit message because it's best practice"

It’s important to leave messages describing the changes you’ve made so your future self can find them, in case something goes wrong. Now should you ever have to come back to this “Save” it will be easier to find. We can now imagine your repository looking like this:

At any point when you’ve committed changes to your repository, if you cloned your repository from GitHub, you can push your changes back up to the remote GitHub repository with:

$ git push

Ok, nice! But let's say you’ve been working on your project for a while, and you realize that somebody else, definitely not you, made a terrible mistake that compromised the project. You know this mistake was made while they were updating “Rom Drive Data”, so you want to go back to that commit and fix it.

This can be done by using:

$ git log

To examine your previous commits. This will bring up something like this:

Feel free to email me. I don’t bite often :)

There’s a lot of information here. These are previous commits starting with the most recent at the top. You can see each commit’s unique id, who made the commit, when it was made, and it’s commit message. In order to go back to a previous commit, copy the commit’s unique id, hit “q” to escape the Git log, then use:

$ git checkout <unique id>

You’ll get a message like this:

Ah! You’re a headless zombie! Not really. What it’s saying is that you aren’t on a branch anymore. Flow in Git is set up in branches, and in a new repository there’s only one branch, called “master.” It looks something like this:

In the detached head state, you can try other things, add other commits, and freely experiment to your heart's content. But if you want any of these changes to be saved, you will have to make a new branch. This can be done quite easily with:

$ git checkout -b <new-branch-name>

which makes a new branch (the “-b” part), then moves over to it (the “checkout” part). If you issue this command while in a detached head state, it will automatically make the branch out of your current state.

It’s like our bold adventurer going through the dungeon and coming to a crossroads. He saves his game before going down the left path, where he finds gold and loot, but maybe he also wants to know what happens if he goes down the right path instead. So we make a branch:

As mentioned before, navigate between the branches with:

$ git checkout <branch you want to go to>

There’s so much more that can be done with Git! A great place to start learning is the Git documentation. May all of your version-controls be merry and bright! Happy Wednesday :)