Recently, graphs have attracted a plethora of attention by the machine learning community. Graphs can represent many complex systems such as social networks, protein-protein interaction networks, knowledge graphs, citations, Internet, etc. These are examples of information that operate in the non-Euclidean space but even images and text are special graphs that operate in the Euclidean space.

Image is taken from William Hamilton COMP551: Graph Representation Learning

Graphs (G) are special data structures that are composed of vertices (a.k.a nodes V) and edges (a.k.a. links E) G(V, E). Edges can be weighted and represent, for example, a distance between cities. Additionally, nodes can have a probabilistic interpretation and represent random variables. These are special graphs know as probabilistic graph models where two r.v. are independent if there is no connection. For instance, neural networks are a specific graph model. Graphs are everywhere and most knowledge can be modeled with graphs.

Undirected Graph G(V, E), circles represents nodes and lines represent edges.

Here, I will introduce some terms that are commonly used in graph theory in order to complement this nice post, so make sure to check it out!

Let’s get started with a reminder about directed and undirected graphs. When all edges represent direction is a directed graph (2) and when all edges are undirected is an undirected graph (1).

1) Example of an undirected graph; 2) example of a directed graph.

Path

A path is a list of all the necessary nodes to connect two nodes. For example, in order to connect the nodes A and D we need to go to the nodes {A, B, D}. So the path can be formed with the nodes A, B, D, and edges {(A, B), (B, C), (C, D)}.

In order to go from A to D, we need to follow the path {A, B, D}.

Directed graphs have directed paths and have some nodes that are ancestors and descendants. Ancestors are the predecessors of a node in a path; the ancestors of D are {B, A}. Similarly, descendants are children of a node; for instance, the children of A are {B, D}.

Directed Acyclic Graphs

Graphs contain cycles, which are directed paths that begin and finish in the same node. For example, the graph above has the cycle {A, B, D, C, A}. If we ignore direction, we have loops. For example, the nodes {A, B, C} are a loop, but they cannot be a cycle. When there is an edge connection two non-adjacent nodes, we have a chord. For example, the edge (C, B) is a chord.

If there are no cycles, the graph is acyclic. So, directed acyclic graph (DAG). It is just a graph that contains paths with no cycles. The ancestors and descendants of a DAG can be found in the path; nodes won’t revisit a node. For example, the following graph is a DAG.

Directed Acyclic Graph. Contains two paths P1 = {A, C, D} and P1 = {A, B, D}.

Parents of D: pa(D) = {C, B}.

Children of A: ch(A) = {C, B}

Family of a node is itself and its parents. Family of D: fa(D) = {D, C, B}.

Markov blanket of a node is its parents, children, the parents of its children. Markov blanket of B: MB(B) = {A, D, C}.

Directed graphs are important because links represent dependencies between parent and child.

Clique

An undirected graph has neighborhoods, which represent the nodes connected to a node ne(x). For example, in the following graph ne(A) = {B, C, D}. Said so, a clique is a subset of nodes where all nodes are fully connected and have the largest length. As a consequence, all members of a clique are neighbors. In the graph example, we have two subsets of fully connected nodes: S1 = {A, B, C, D} and S2 = {B, D, E}. S1 has the largest length and is a clique. Fully connected sets that are non-maximal are known as cliquo.

Example of a clique: {A, B, C, D} is a clique while {B, D, E} is a cliquo.

We express graphs information as matrices or lists in order that computers can understand. Before introducing a clique matrix, we will define an edge list and the adjacency matrix.

An edge list is just a list of node-node pairs. For example, the undirected graph below has the following list: L = {(A, B), (B, A), (A, C), (C, A), (B, C), (C, B), (C, D), (D, C), (B, D), (D, B)}. Directed edges are represented only once, but undirected edges are duplicated to maintain both directions.

(Left) Undirected graph; (right) directed graph.

Another way to represent a graph is with an adjacency matrix that has a 1 if there is an edge between node i, j, otherwise, there is a 0. You can add self-connections by adding 1s in the diagonal. The adjacency matrix is symmetric for undirected graphs and triangular adjacency matrix for directed graphs because they preserve ancestry. For example, see the adjacency matrix and triangular adjacency matrix for the graphs above.

Adjacency matrix for undirected graphs and triangular adjacency matrix for the directed graph (we only add the parents of a node)

Adjacency matrix has an interesting property: powers indicate the number of paths. Basically, you have k edge hopes from node i to node j.

Also, the addition of rows gives the degree of the graph. The degree is the number of edges a node touches.

Finally, a clique matrix has the maximal cliques in each of its columns. And a cliquo matrix relaxes this constraint of having maximal cliques. When you have a two-node cliquo, the resulting matrix is an incidence matrix. This matrix is interesting because the product of the incidence matrix results in the adjacency matrix with the degree of the graph in the diagonal. See the clique matrix and the incidence matrix for the undirected graph above.

Clique matrix and incidence matrix

There is a lot more to talk about graphs like spanning trees, laplacian operators, spectral graphs, graph kernels, graph factorization, etc.