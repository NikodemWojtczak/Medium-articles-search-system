How to setup the Python and Spark environment for development, with good software engineering practices Bogdan Cojocar · Follow Published in Towards Data Science · 6 min read · Mar 17, 2019 -- 4 Share

In this article we will discuss about how to set up our development environment in order to create good quality python code and how to automate some of the tedious tasks to speed up deployments.

We will go over the following steps:

setup our dependencies in a isolated virtual environment with pipenv

how to setup a project structure for multiple jobs

how to run a pyspark job

how to use a Makefile to automate development steps

to automate development steps how to test the quality of our code using flake8

how to run unit tests for PySpark apps using pytest-spark

running a test coverage, to see if we have created enough unit tests using pytest-cov

Step 1: setup a virtual environment

A virtual environment helps us to isolate the dependencies for a specific application from the overall dependencies of the system. This is great because we will not get into dependencies issues with the existing libraries, and it’s easier to install or uninstall them on a separate system, say a docker container or a server. For this task we will use pipenv.

To install it on a mac os system for example run:

brew install pipenv

To declare our dependencies (libraries) for the app we need to create a Pipfile in the route path of our project:



url = '

verify_ssl = true

name = 'pypi' [[source]]url = ' https://pypi.python.org/simple' verify_ssl = truename = 'pypi' [requires]

python_version = "3.6" [packages]

flake8 = "*"

pytest-spark = ">=0.4.4"

pyspark = ">=2.4.0"

pytest-cov = "*"

There are three components here. In the [[source]] tag we declare the url from where all the packages are downloaded, in [requires] we define the python version, and finally in [packages] the dependencies that we need. We can bound a dependency to a certain version, or just take the latest one using the “*”symbol.

To create the virtual environment and to activate it, we need to run two commands in the terminal: