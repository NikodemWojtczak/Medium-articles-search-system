Hello everyone and welcome to the second article in the “From Scratch” series. (Previous one: From Scratch: Bayesian Inference, Markov Chain Monte Carlo and Metropolis Hastings, in python)

In this article we explain and provide an implementation for “The Game of Life”. I say ‘we’ because this time I am joined by my friend and colleague Michel Haber. The code is provided on both of our GitHub profiles: Joseph94m, Michel-Haber.

The first section will be focused on giving an explanation of the rules of the game as well as examples of how it is played/defined. The second section will provide the implementation details in Python and Haskell for the game of life. In the third section, we compare the performance and elegance of our implementations. We chose these two languages because they represent two of the most used programming paradigms, imperative (Python) and functional (Haskell), and because of the relative ease they provide in writing expressive and understandable code.

1-Introduction to the Game of Life

The game of life is a cellular automaton imagined by John H. Conway in the 1970s and is probably, the best known of all cellular automata. Despite very simple rules, the game of life is Turing-complete and deterministic.

The game of life is a game in the mathematical sense rather than a playable game. It is “zero player game”.

The game takes place on a two-dimensional finite or infinite grid whose cells can take two distinct states: “alive” or “dead”.

At each stage, the evolution of a cell is entirely determined by its current state and the state of its eight neighbours as follows:

1) A dead cell with exactly three living neighbours becomes alive.

2) A living cell with two or three living neighbours remains alive.

3) In all other cases, the cell becomes (or remains) dead.

Let’s assume a simple initial state where only 3 cells are alive: left cell, middle cell, and right cell.

Starting from the simple configuration in Figure 1, and letting the simulation run for one iteration results in Figure 2.

So how does this happen?

Figure 2

The cells on the left and on the right have only one neighbour, the middle cell, so they die. The middle cell has two neighbours, left and right, so it stays alive. The top and bottom cells have 3 neighbours (middle, right and left) so they become alive. It is really important to note that a cell does not die or live until the end of the iteration. I.e. the algorithm decides which cells are going to die or come to life and then gives them the news all together. This ensures that the order in which cells are evaluated does not matter.

Running one more iteration gives us the state represented in Figure 1(initial state).

As such, starting with this configuration, the game enters the infinite loop represented in Figure 3. This configuration is called a blinker.

Figure 3: Blinker

Figure 4: An early state from figure 5 that shows some interesting structures.

Now for a more interesting setup to show what impressed Conway the most. Starting from the simple configuration in the left image of Figure 5 and letting the code run, the board evolves into something completely unexpected. We can observe stable structures: blocks and beehives. We can also observe looping structures such as the blinkers from Figure 3 and the larger blinkers that are made up of 3 or 4 smaller ones. Another interesting structure observed in this simulation is the glider. A glider looks like an old video game spaceship. It is unbounded by space, and keeps on going — Ad vitam æternam.