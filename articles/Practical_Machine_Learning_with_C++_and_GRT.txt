Photo by Franck V. on Unsplash

This will be the first in a series of tutorials that explain the basics of machine learning from a programmerâ€™s perspective. In part 1 I will show how you can incorporate basic machine learning into a C++ project using the GRT library.

What is machine learning?

Machine learning is an approach to computing that enables programs to generate predictable output based on a given input without using explicitly defined logic.

For example, using traditional logic-based programming we could write a function that classifies fruit, which takes colour and dimensions as input and outputs the name of the fruit. Something like this:

string classifyFruit(Colour c, Dimensions d)

{

if (c.similar({255, 165, 0})) // green

{

if (d.similar({10, 9, 11})) // round-ish

{

return "Apple";

}

else

{

return "Pear";

}

}

if (c.similar({255, 255, 0})) // yellow

{

return "Banana";

}

if (c.similar({255, 165, 0})) // orange

{

return "Orange";

}



return "Unknown";

}

It can be seen that this approach has all sorts of problems. Our function only knows about four types of fruit, so if we want to extend it to also classify Clementines, we would need additional statements differentiating them from Oranges. We would also get pears and apples mixed up depending on the exact shape of the fruit and the definition of our similar() method. To create a function that would classify a wide range of fruit with a good degree of accuracy things would get very complex.

Machine learning solves this by representing the relationship between input and output as state rather than through logical rules. This means that instead of programming our classifier using if / then / else statements, we can use given / then examples to express our intent. So the code for determining the behaviour of our function could look more like this: