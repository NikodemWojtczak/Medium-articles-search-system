Extract Trending Topics from Online Reviews

Photo by Rock Staar on Unsplash

Customers depend on online user reviews when choosing a restaurant. Reviews can persist in trends when a group of reviewers starts to post about a common topic. This topic could be a newly added feature of a restaurant, the opening of a new restaurant in town, or about a popular food item in the Menu. This common topic can be interpreted as a trending topic. Then the customers start following the new trend. My approach is to derive monthly trending topics among reviewers by using frequent itemset mining techniques. The data set that I’m going to use is Yelp Data set from Yelp Challenge 2019.

Frequent Itemset Mining vs Association Rule Mining

Frequent patterns appear again and again in a data set. A frequent itemset is made up of one of these patterns. Frequent itemset mining finds interesting frequent itemsets that exceed the minimum threshold value. This threshold value is a measure that indicates the minimum number of items that contains in the itemset. The concept of frequent pattern mining was evolved with market basket analysis. Market basket analysis can be taken as the most popular example nowadays. Here, products that are sold together are analyzed. Simply, Frequent itemset mining shows which items appear together in a transaction.

Association rule mining is about finding the relationships among these items. In view of market basket analysis, it calculates the probability of buying a certain product after purchasing one or more products. However, both concepts go together when applying to problems. The popular algorithms being used are Apriori, FP-Growth and Eclat.

Support and Confidence

There are two main measurements when it comes to frequent itemset mining. They are support and confidence. These two measures evaluate how interesting the patterns are. Support is a measure of absolute frequency and confidence is a relative frequency. Support indicates how many times the items appear together out of all the transactions. Confidence indicates that how many transactions following a certain rule. Basically support is a measurement of frequent items that do not consider relations between them and confidence is a measurement of association rules among items. The following are the notations.

Support(A -> B) = Support_count(A ∪ B) Confidence(A -> B) = Support_count(A ∪ B) / Support_count(A)

Frequent itemset mining in text

Text is commonly referred to as unstructured data. Most of the time Frequent itemset mining algorithms can be applied to structured data. However, text can be turned into structured data which data mining techniques can be applied. There are several preprocessing steps to follow in order to output a structured version of data. This structured data can be divided into two groups single word and multiple words. Single word is called bag of words. The main difference of bag of words and multiple words are multiple words preserve the relationship between words so that the semantic meaning of the sentence is maintained.

On the other hand, a sentence can be seen as a collection of words. There can be common words among multiple sentences. Similarly, paragraph consists of words and multiple paragraphs have frequent word sets. These common words can be viewed as a frequent item set. Word will be an item in item set. So the frequent pattern can be formed by multiple words. Mining these patterns will give a basic idea about the common words among sentences or paragraphs rather than extracting single keywords from text. When it comes to user reviews, these common words can be considered as trending topics. The main objective of this experiment is to use frequent itemset mining in order to derive trending topics in user reviews.

Implementation

To implement the above idea, the latest reviews from a particular restaurant were selected and the trending topics in each month were extracted. The following are the criteria to filter out the most convenient restaurant to address the problem.

The data set has various types of businesses. To filter out the restaurants, I selected the businesses which has ‘Restaurant’ in the categories field. For latest reviews I selected reviews posted in year 2018. When comparing the state wise restaurant counts in USA (Figure 1) we see that state ‘Arizona’ has the most number of restaurants. Then the most reviewed restaurant in state ‘Arizona’ was selected by calculating and comparing the review count for each restaurant in year 2018.

Figure 1 : Number of restaurants in each state in the USA according to Yelp Data set (Yelp Challenge 2019)

At the beginning, data was extracted from the JSON files that were provided by Yelp and stored in a relational database for easy access. Preprocessing steps that I followed were turning into lower case, removing punctuation marks, removed white spaces, tokenizing words and removing stop words. Following is the code snippet.

import string import pandas as pd

from nltk.tokenize import word_tokenize

from sklearn.feature_extraction.stop_words import ENGLISH_STOP_WORDS def preprocess_reviews(reviews: pd.DataFrame):

word_token_list = []

for _, r in reviews.iterrows():

formatted_review = r['review_text'].lower()

formatted_review = formatted_review.translate(str.maketrans("", "", string.punctuation))

formatted_review = formatted_review.strip()

tokens = word_tokenize(formatted_review)

result = [i for i in tokens if not i in ENGLISH_STOP_WORDS]

word_token_list.append(result)



return word_token_list;

The algorithm that used to retrieve trending topics was Apriori and the support was 0.3. Below is the code snippet. (Articles that I referred are in the reference section at the end of this article for more details)

import pandas as pd

from mlxtend.frequent_patterns import apriori

from mlxtend.preprocessing import TransactionEncoder def get_trending_words_from_reviews(preprocess_reviews: []):

transaction_encoder = TransactionEncoder()

transaction_encoder_array = transaction_encoder.fit(preprocess_reviews).transform(preprocess_reviews)

df = pd.DataFrame(transaction_encoder_array, columns=transaction_encoder.columns_)



frequent_itemset = apriori(df, min_support=0.3, use_colnames=True)



return frequent_itemset

Please note that association rules are not derived in this experiment. The following code explains how to call the above functions and the format of the review list to be passed.

reviews = pd.DataFrame([{'review_text': 'good food'}, {'review_text': 'great food'}, ]) reviews = preprocess_reviews(reviews)

frequent_itemset = get_trending_words_from_reviews(reviews)

print(frequent_itemset)

Results and Discussion

Following table (Table 1) shows the result from the above experiment.

Table 1 : Frequent words derived from frequent itemset mining for each month using reviews of most reviewed restaurant in Arizona by year 2018

The selected restaurant describes itself in the categories field as ‘Sandwiches, Italian Breakfast & Brunch American (Traditional)’. We can see the terms ‘meatballs’ , ‘sauce’ and ‘pasta’ are popular in January. In February people talk about only two terms out of these three terms. They are ‘meatballs’ and ‘sauce’. When it comes to March both ‘sauce’ and ‘pasta’ get vanished and the term ‘meatballs’ is surviving. Even though all three items are trending at the beginning of the year, only one item could continue it’s popularity. Further, the results show that term ‘meatballs’ has become a trending topic throughout the year. ‘pasta’ has become a popular topic again in August. Another thing that we can observe is that review count has been decreasing at the end of the year (Figure 2).

Figure 2 : Monthly review count of most reviewed restaurant in Arizona by year 2018

This can be interpreted as restaurant is losing its fame with the time. The reason for that might be, even though the restaurant gets good reviews for their service and place there is nothing new and exciting for a frequent user to share. If a restaurant can introduce new food items and upgrade the quality of items that are fading away, the restaurant can redeem its prestige.

The results are different from restaurant to restaurant and the explanation should be done according to that. The results can be improved by adding more preprocessing steps. Concepts like stemming, lemetization and POS tagging will be helpful in that case. Also, the predictions can be improved by applying this method separately on good reviews and bad reviews.