Five tips for getting started in data science programming

Put the time and effort in early and it will make you a great programmer later on Keith McNulty · Follow Published in Towards Data Science · 7 min read · Aug 11, 2019 -- 1 Share

If you want to be a genuine data scientist, you need to be able to code. There’s no getting around it. Some people don’t like this idea, and a number of companies are already tapping into that discomfort by offering ‘automated data science’ products — we do the coding so you don’t have to. If these are your only toolkit, you are not a data scientist.

The litmus test of a strong data scientist is that they are not scared of any data set or any problem. They might not know how to handle it straight away, and in fact it’s quite common that they don’t. But they know they can find out how, and they can eventually produce neat, efficient, reproducible code to handle the problem if it comes their way again. If you want to be a great data scientist, that’s the mindset you need to aim for.

So much of the inner confidence and quiet competence of a strong data scientist comes from how they learned to code in the first place. If you are just starting out, how you go about those early weeks and months of learning are critical to whether or not you will flourish further down the line. If you take the lazy approach — the how but not the why — you’ll develop habits that will make you less confident and efficient later. If you put the work in early — understand the how AND the why — you’ll gradually start to feel that confidence build and your capability expand faster and faster as the months go by.

Here are five tips to help you make a great start as you embark on your learning.

1. Choose the right learning sources

People learn in different ways. For example, I am not great at video learning. I need a detailed written narrative that I can carefully analyze and understand at a pace that I am happy with.

Avoid sources that are too practical — this means that they show you what to do but don’t explain why it works. If you are copy-pasting a method to solve a coding problem, and you have no idea why the method worked, then you haven’t really learned anything because you will have no idea how to apply that method later if a similar problem pops up again.

Good learning sources invest time in breaking down the underlying logic of a method. The best ones actually encourage you to…