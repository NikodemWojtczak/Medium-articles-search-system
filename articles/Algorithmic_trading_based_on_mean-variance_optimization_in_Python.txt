Member-only story Algorithmic trading based on mean-variance optimization in Python

This is the fifth part of a series of articles on backtesting trading strategies in Python. The previous ones described the following topics:

introducing the zipline framework and presenting how to test basic strategies (link)

importing custom data to use with zipline (link)

(link) evaluating the performance of trading strategies (link)

implementing trading strategies based on Technical Analysis (link)

This time, the goal of the article is to show how to create trading strategies using Markowitz’s portfolio optimization and the Modern Portfolio Theory.

In this article, I first give a brief introduction/reminder on the mean-variance optimization and then show how to implement it into trading strategies. Just as before, I will backtest them using the zipline framework.

The Setup

For this article I use the following libraries:

zipline 1.3.0

matplotlib 3.0.0

json 2.0.9

empyrical 0.5.0

numpy 1.14.6

pandas 0.22.0

pyfolio 0.9.2

Primer on mean-variance optimization

In 1952 Harry Markowitz published the ‘Portfolio Selection’, which described an investment theory now known as the Modern Portfolio Theory (MPT in short). Some of the key takeaways are:

the portfolio return is the weighted average of the individual portfolio constituents, however, the volatility is also impacted by the correlation between the assets

the investors should not evaluate the performance of the assets separately, but see how they would influence the performance of a portfolio

diversification (spreading the allocation over multiple assets instead of one or very few) can greatly decrease the portfolio’s volatility

We will not go deeply into the assumptions of MPT, but the main ones are that all investors share the goal of maximizing the returns on investment while avoiding as much risk as…