You never write code for yourself, but for others.

This is the first basic rule I tell coding data scientists: you never ever write code for yourself, but always for others.

And, mind you, “other” people can be… you. If you don’t write for your colleagues, at least write for your future self.

What does that imply?

COMMENT YOUR CODE. Twice as more as you’re doing now :) Actually, commenting before writing code is a good practice, too :)

Write politely. Use explicit variable names, file names (I see you, Mr untitled09.ipynb). Delete/comment the code you’re not using anymore.

Document your code (not exactly the same as commenting). Put a README, give your reader a helping hand.

Collect versions of the modules you’re using, so that in 1 year (and who know how many JS frameworks could be created in 1 year), when you’ll have to run the project in a rush, you’ll find the versions of the modules you need.

Code that is not pushed into a repo doesn’t exist.

I am amazed by the number of data scientists working on their own GPU-packed machine, with all the bells and whistles, and a very fragile hard drive with all of their life packed in a tiny little space.

A hard drive has a density of, say, 500 Gbit per square inch. That means I tiny little movement can lead to disaster. Given my own ability to bang into furniture, that’s a lot of trust for such a small space.

So, treat code laying on your PC just as if it didn’t exist. It’s not versioned, it’s not reviewed, it’s not CIed, it’s not backed up. It. Just. Doesn’t. Exist.

Oh, and did you know Jupyter notebooks were actually versionable files?

Be as conservative as you can in your architecture choices

You’re a data scientist? Great. You would like to use the latest framework that has half a star on a Github repository that’s been published 3 years ago and never touched ever since (sorry, no links). Don’t.

You’re going to have a lot of uncertainty to deal with, so please avoid skating on thin ice by using an obscure Pytorch fork from an abandoned university.

One line of code costs 10x more the time it takes to be written

…speaking of which… you have to be aware that one line of code costs a lot more than the time it takes to write it. Even dead code.

So when you’re adding a new feature nobody asked you for, when you’re training your model to detect patterns that were not part of the specs, you’re just building technical debt.

Successful coding sessions often involve trimming unnecessary parts of your code. This is one simple way to manage complexity.

Trim your code.

You never train for yourself, neither.

Machine Learning often involves training data, evaluating your training and building a scalable, powerful inference machine.

The first part involves a lot of experimentation. And there’s always going to be a better person who could bring improvements in your machine learning design. I mean, even you, Ian Goodfellow, if you’re reading this, trust me, there is someone better than you. For example, your future self!

So, as a rule of the thumb, never train for yourself but for someone else. That means, documenting, commenting, and two major things:

give ways to others to train against your original data (version your data and give its URL, for example!)

give ways to others to evaluate against your test data

Seems obvious? Go and read some deep learning papers, and you’ll understand it’s not always that obvious :)

Bad coders copy/paste. Great coders steal shamelessly.

Half of what programmers do is looking up for answers on Google. Ah, and here comes the Stack Overflow post explaining how to solve your problems!

Now, once you’ve copy+pasted the solution, just be kind enough to reference the original Stack Overflow post, for example as a comment. It’s not much but it really helps a lot when you’re trying to figure out why you did that.

Even Microsoft does that!

It will save a lot of time when you’ll look at your code later.

Don’t use Python 2 (please)

Don’t scare the python

Naaaah, come ooooon… It’s 2019, seriously. Python 3 has so much to bring. Plus, you don’t like UnicodeErrors, do you?

All in all, following these simple rules will make you a better coder, a better data engineer and a better data scientist. If what you’re doing has a purpose, at least let other people share it!

And you? What are your best practices? Tell me in comments!