An Actual Application for the MNIST Digits Classifier

Have you ever thought to yourself “I just made a great MNIST classifier! Now what?”. While the handwritten digits dataset is a great, clean way to get into machine learning (on the classification side, anyway), it is rightly dubbed the “Hello World” of the field. You can use it to make a sensible ML pipeline and learn how to implement different kinds of models, but it doesn’t have much use past that… until now. One of my first posts here used some basic python data structures and logic to solve Sudoku puzzles about twice as fast as you could blink, but I had to manually enter the numbers into the arrays to prepare the solver. In this post, I’d like to get into how to use some image processing tools and a convolutional neural net to function for optical character recognition (OCR).

There are great OCR tools available for free, like Google’s Tesseract, which I have used a good amount in my reinforcement learning series, but Tesseract doesn’t perform when it comes to recognizing numbers/digits. If I wanted to read a Sudoku puzzle into a Python interface, I was going to need an OCR tool that specializes in digit recognition. It dawned on me that a neural net trained on handwritten digits would likely detect the same patterns inherent in typed numbers, so as long as the image preprocessing was done properly, I would be able to convert images of numbers to actual digits using everyone’s favorite introduction to deep learning! As always, the code I will walk through will be on my Github.

An example image of an ‘Easy’ puzzle

The premise behind this application is that I had written a program that could solve Sudoku puzzles without doing any slow, computationally heavy guess-and-check work but had to enter the puzzle in manually. In a perfect world, I could take a screenshot or picture of my puzzle, run my application, and have the problem be solved. To the left is the image that I wanted to be able to parse through and extract the numbers from the squares and the code I used to turn this composite puzzle into a 9x9 array of pictures is below: