Code

I’ll follow my jupyter notebook to make things easier to show. Feel free to either simply run it or implement the code on your own. Keep in mind that some code snippets use functions implemented in previous snippets, therefore the order of occurrence matters.

All mentioned files in this post are available in my GitHub. Check this repo out!

Setting up the environment

Assuming you are familiar with Anaconda, I’ve prepared a yml file so you can quickly set up the environment just like mine, even the same library version. Here’s the content of the file.

name: object-detection-oidv4

channels:

- conda-forge

- anaconda

dependencies:

- python=3.6.9

- numpy=1.16.5

- tensorflow=1.13.1

- matplotlib=3.1.1

- pillow=6.1.0

- pandas=0.25.1

- jupyter=1.0.0

- ipython=7.8.0

Once you have the file, execute the following command to create the environment as well as install all necessary dependencies.

$ conda env create -f environment.yml

Activate the environment after the installation is completed.

$ conda activate object-detection-oidv4

All set! Let’s dive into some python code.

Validating TensorFlow version

Due to the recent release of Tensorflow 2.0, let’s make sure you are using the same version that this code was built upon — everything is OK if an ImportError is not raised. You don’t have to worry about it if you created the environment using my file.

Validating TensorFlow version

Configuring plotting

Configure matplotlib to display images inline if you are using a jupyter notebook. Otherwise, just do the import.

Configuring plotting

Importing some common libraries

We’ll need some libraries to deal with files, so here are the imports. I’m also importing numpy since we’ll be using it throughout the notebook.

Importing some common libraries

Getting the model file

In this post, I’ll be using a model interestingly named as:

faster_rcnn_inception_resnet_v2_atrous_oidv4

If you want the check the model config, here’s the file.

Let’s now download the compressed model file if it does not exist yet. You can play with other models as long as they are compatible with the OID; otherwise, it would require more code changes.

Getting the model file

Getting the box description file

We also need the box description file. As you’ll see, the inference code will return some numbers corresponding to the classes (1 to 601). Thus, we need this description file to map the resulting number with human-readable class name. Similar to the model file, it won’t be downloaded if the file exists. Notice that, every class is treated as an object, such as animals and people. So please don’t get offended if I refer to a person as an object. :-)

Getting the box description file

If you are curious about the 601 classes available in OID for object detection, check out this nice dendrogram.

Getting some test images

I’ve prepared the notebook for those who want to just run it and see the results, and possibly do some customization. In fact, it was based on some code from the Tensorflow models repository, but I modified it in my way to make it simple for everyone to understand. Thus, continuing to simplify things to you, the following code will download some test images. Feel free to change the URLs so you can test with other images.

Getting some test images

Extracting the model files

Now that all necessary files are in place, let’s extract the files from the compressed model file so that we can have access to the inference frozen graph. This file is optimized for inference, i.e. all training stuff is removed.

Extracting the model files

Loading the box descriptions into a dictionary

Let’s create a dictionary to map the classes, where the key is simply the index and the value is another dictionary, which contains the class id and name as key and value, respectively.

Loading the box descriptions into a dictionary

Checking some labels

This is how the classes are mapped, however, we won’t be using the id. Instead, we’ll be using the index to make it easier. Just to exemplify, if we get class #100, then it corresponds to Cheese.

Checking some labels

Loading the frozen model from file

Now we need to create our graph from the frozen model file.

Loading the frozen model from file

Checking original test images

The following code snippet defines a helper function that shows images with their filename set as the title. Then, it goes through every test image and shows it.

Checking original test images

Curious about the images that I’ve picked? Here they are: