Photo by Samuel Zeller on Unsplash

Member-only story How to use Test Driven Development in a Data Science Workflow

Every software developer knows about Test Driven Development (or TDD for short) but not enough people in data science and machine learning. This is surprising since TDD can add a lot of speed and quality to data science projects, too. In this post, I walk you through the main ideas behind TDD and a code example that illustrates both the merit of TDD for data science and how to actually implement it in a Python-based project.

What is Test Driven Development?

TDD is an evolutionary approach to software development. That is, it relies on incremental improvements, which goes along well with agile processes.

The easiest way to understand TDD is the “Red, Green, Refactor”-system based on the working model proposed by Kent Beck in 2003:

Red: write a new test and make sure that it fails. If it passes, the code base already covers the required functionality and does not need additional work.

write a new test and make sure that it fails. If it passes, the code base already covers the required functionality and does not need additional work. Green: write code that passes the test. Most importantly, all previous tests have to pass, too! That is, the new code adds to the existing functionality.

write code that passes the test. Most importantly, all previous tests have to pass, too! That is, the new code adds to the existing functionality. Refactor: revise code if necessary. For instance, make sure that the structure of the code base is on the correct level of abstraction. Do not add or change any functionality at this stage.

You can also think about these steps as finding answers to different questions:

Red: How can I check whether my code delivers a specific functionality?

How can I check whether my code delivers a specific functionality? Green: How can I write code that passes my check?

How can I write code that passes my check? Refactor: What do I have to change in the code base to improve it without affecting the functionality?

There are numerous advantages of this approach compared to other methods: