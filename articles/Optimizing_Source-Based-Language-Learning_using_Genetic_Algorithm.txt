Optimizing Source-Based-Language-Learning using Genetic Algorithm

Maximizing Reward from incremental Lesson Plans to learn Classical Arabic Shaham · Follow Published in Towards Data Science · 10 min read · Jun 8, 2019 -- 2 Listen Share

What is Source-Based-Language-Learning in this context? Very simple — it is my way of describing the process of learning a language to literally understand a source (i.e. book, speech, etc.). In the specific case of what I will be sharing, it translates to learning Classical Arabic to be able to read/comprehend the Quran (in its native language, without translation).

So why all this drama of using a Genetic Algorithm (GA) to learn a language? To understand this, it will require a better sense of the problem statement.

Problem Statement

This project is my attempt at following up on a proposal I have been thinking of recently which can be read in full detail here: Learning Classical Arabic, DIY-Style. The gist of it is that for amateurs like myself, who simply want to learn Classical Arabic to literally understand the Quran (without any scholarly ambitions), existing approaches are just… too much with too little (immediate) reward — details for why this is, see the linked blog post. Near the end of the post, what I propose as an alternative is a DIY-style approach that isn’t as structured around grammar rules and rigid processes. Quickly theorizing — by considering other successful and often-employed DIY applications like learning how to play an instrument —, there are a couple of characteristics that I would desire from such an alternative approach:

A DIY approach is not a ‘curriculum’ — this is exactly what we are trying to escape. It should not tie you down to anything. It should not necessitate a specific structure but allow for one to organically come about from the student. The ‘lesson plans / tutorials’ should come in bits and stages — easily consumable in a sitting yet lasting in reflection-able material for a week. Each session should engage the student and prize her with a grain of what she desires most in this adventure: a cashable result. Cashable results being some form of capital, something that is a part to the Big Deal (understanding the entire Quran) but complete in itself as well. For example, some verses should be completely (not partially!) readable even if they are easy verses — if I hear them in prayer or recite them, a light should come on. If I am around friends and the sentence is said, I should be able to grasp at some social attention by claiming, “ah, that means.. [insert english translation here]”. Furthermore, these lesson plans should be optimized — no one likes to follow tutorials that are randomly put together. Students must feel there is meaning — strong, overpowering causes — behind proposals. Usually in DIY approaches, this is accomplished by an expert providing the guidance — the students remain under the impression that if an expert chooses one route, they have actively not-chosen other routes. … With these principles in place, the rest of the process should be untouched. The student should be left alone, the teacher should not care to see any change. On the surface, it would be an indifferent, uneventful process. But deeper in, I imagine a heavy current of joy and passion interplaying with whim and hunger. (Once again, be advised this entire approach would be for amateurs who do not wish to be anything but — for modest students, without long term ambitions holding them back.)

Keeping these in mind, let’s try and come up with some methodology to address our problem (and then the need for GA will make sense).

Performance Test: Naive vs. Optimized (GA)

Terminology to keep in mind:

- Corpus = Quran (or a subset of the Quran)*

- Root Word** = Lemma of a word (i.e. the ‘basic’ form of the word), * For all the following Statistics and Experiments, I’ve used a subset of the Quran where root words that appear less that 5 times and verses with those root words have been filtered. This is because it significantly reduces computation time and it is highly, highly unlikely those will be selected by the genetic algorithm in our case. I will include a ~~ next to any number effected by this corpus reduction to indicate its approximation. **Note that this is different than the trilateral root of Arabic words

Naive Solution

A naive, base methodology that would tackle the criteria of our problem statement would be a simplistically greedy approach: Order the words in the corpus by their frequency of occurrence (highest to lowest) and start learning the top words, hoping to cover as much of the corpus as possible with the least amount of effort. This will keep us tied to the corpus and seems to promise efficient rewards.

Though the intention here befits the DIY-spirit, the specific methodology lacks ingenuity — it overlooks a key element of DIY-style learning: greedy-for-reward, not greedy-for-coverage. What is a ‘reward’ in our case? Is it the understanding of a word of Classical Arabic? False, it is to understand the corpus. What is the “unit of understanding” of the corpus then? Contrary to intuition, it is not the meaning of a word but rather a verse [— a phrase really, but we will approximate to a verse].

Compare this to music: learning notes/chords is the work I have to do to get the reward which is to be able to play a sequence… to play a note itself is practically meaningless. In the best case scenario, learning a set of notes allows me to play the entire song or some complete bars at least.

Ask yourself a simple question: say you have learned 9/10ths of a sentence in a single sitting so far — if you had the energy to learn only 1 more word and you had the choice between the following:

a word that covers 10% of the corpus but does not complete the sentence a word that covers 8% of the corpus but completes the sentence

which would you pick? Most would choose option #2 — because a sentence is closer to what I call a ‘cashable result’.

Let’s look at some stats of this naive approach:

Learning top 100 most occurring Root Words in the Quran: Total % of Corpus Covered: ~~64% of the Quran

# of Verses Completed: 91

# of Words Covered: 520

Avg Length of Completed Verses: 5.71 words per verse

So, though we will have covered ~~64% of the Quran we will only have 91 verses (tangible, cashable rewards) under our belt after learning the 100 different root words. I think we can do better.

The question becomes: What are 100 root words I can learn such that, it will maximize the amount of complete verses I can understand?

No problem, let’s try all the combinations, calculate how many verses they complete, and then pick the one that covers the most verses. Even with a reduced set of only 1250 Root words, we have a total of 8.987762e+149 combinations ( 1250 choose 100 ).. yes problem. Cue Genetic Algorithm.

GA Solution (and how a GA works)

GAs are great for this kind of crazy combinatorial stuff. A more detailed overview of what a GA is and how a GA can be programmed can be found here. For now, I will skip the technical details and give a generic overview of what we are doing.

We randomly create a population of multiple possible solutions (each solution is called a chromosome)— so, we pick out various combinations of 100 Root Words (RWs) out of the corpus. Each chromosome essentially has a different gene structure (i.e. a different combination of RWs). So if a solution has a root word X, we say the chromosome has gene X ‘selected/activated’. We calculate each solution’s fitness (think evolution theory)— this is a score of how ‘good’ a solution is given a specific objective. In our case, it is relative to how many verses this specific set of 100 RWs will complete. Verses with more words will be weighted higher. Select the ‘best’ (as in, those with highest fitness scores) solutions as parents and breed by crossover — this is exactly as you would imagine it, you take 2 parent chromosomes, split both of them at some random point and join the first end of one with the second end of the other. This creates children chromosomes. We now have new possible solutions. To add some variety, we then mutate the children by randomly activating or de-activating random genes (i.e. randomly add or remove any RW from a solution). After crossover (step 3) and mutation (step 4), we may have more than 100 RWs in any given solution.. to fix this we go through a repair step. If a solution has more or less than a 100 RWs, we add/remove random RWs until it only has 100. Repeat step 2–5 multiple (like thousands of) times and slowly, you will start breeding better and better chromosomes (i.e. higher fitness scores). In this way, even without exploring all the combinations, we will gradually start moving towards high performing solutions. Recall that our fitness scoring is based on how many verses the combination of RWs completes — therefore, we will end with combinations that are optimized to complete the most verses as possible.

Through this process, the GA will favour selecting root words that lead to completed verses.

What results does a process like this yield? After running for 1.5 hours (though you could leave it running for days even), with a population size of 5000 chromosomes, we get following stats:

Learning 100 Root Words in the Quran selected by GA: Total % of Corpus Covered: ~~55% of the Quran

# of Verses Completed: 226

# of Words Covered: 1262

Avg Length of Completed Verses: 5.58 words per verse

We sacrifice total corpus coverage (which is a superficial metric of reward) for a whooping total of 226 completed verses (cashable reward full of capital) spanning 1262 total words from a mere 100 unique root words — compare that to 91 verses spanning 520 total words in our naive solution. We’ve already made some headway — creating a set of 100 beginner RWs to learn to maximize our reward — but this is still not proper DIY-style self-learning because we’d have to learn 100 words to reap the rewards… not something that can be done in a single sitting. And in proper fashion, each sitting must give rewards to keep us motivated— we are impatient, greedy, hungry amateurs after all.

Using GA Solution to create Optimized Lesson Plans

We can use the above GA approach to create optimized lesson plans — each lesson gives us some homework (learning RWs) designed to reap the most rewards as possible (# of completed verses). We simply run the GA incrementally, selecting 10 RWs at a time.

Sample Set of 10 Lesson Plans (w/ 10 RW to learn in each)

I’ll present a beginner set of 10 Lesson Plans generated from incrementally running the GA for some hours. Each optimized lesson requires you to learn 10 RWs. Ideally, each lesson can be completed in a single sitting (though it will require some time and perhaps review until you move on to the next one).

Total % of Corpus Covered (after all lessons): ~~51%

Total # of Verses Completed: 228 % of Corpus Covered per Lesson:

1 12.03%

2 8.14%

3 7.85%

4 2.01%

5 6.83%

6 3.08%

7 3.55%

8 1.79%

9 2.75%

10 3.20%

Interestingly, incremental runs of the GA does not decrease our performance significantly (total coverage from 55% to 51%, but total # of completed verses from 226 to 228), hinting at well-optimized solutions.

Lesson Plan Overview Stats

Root Words to Learn per Lesson

Clicking the link under the Details column will direct you to corpus.Quran which presents the meaning/context of the root word in order to learn/study it.