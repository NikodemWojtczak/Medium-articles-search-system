Inside Headless CMS

Learn and understand the power of headless CMS, the tools that can speed up the application development. Daniele Fontani · Follow Published in Towards Data Science · 6 min read · Mar 14, 2019 -- Share

In this article, we will learn about Headless CMS, understand the advantages, and when we should employ it. We will also discuss the main limitations. To better understand how and HCMS works behind the scene,s I will explain how I design and build RawCMS, an Aspnet.Core Headless CMS with Oauth2, extension plugin system, and business logic support. This solution is available on GitHub and released on Docker Hub as a demo.

Photo by Sincerely Media on Unsplash

What is a Headless CMS?

A traditional CMS combines content and rendering part, meanwhile, a headless CMS is focused only on the content. This may seem a limitation because barely speaking you lose something. The purpose of HCMS is to decouple logic from content making easy change management and decomposing complex application in many components, each one with his single responsibility.

Going in this direction HCMS is something that can replace what you are calling backend and save a lot of useful work creating CRUD statements.

HCMS born to create a multi-component application where you can quickly change presentation logic and design, and this is a big improvement when you are working on modern websites or application and you need to restyle\change UI once at a year because of business requirement.

Many vendors sell their product and label it at “HCMS” just because it is decoupled (and because it sounds cool and may drive to a sell improvement..). In my point of view, I’m strictly related to the original integralist definition: headless cms means an API first, non-monolithic CMS, completely decoupled from the interface or other components.

Advantages of a Headless CMS

Why use a headless CMS? I could simply say that in some scenarios it can be useful to decouple systems, make easier frontend replacement and speed up the development phase, but I feel obliged to explain better using a bullet list.