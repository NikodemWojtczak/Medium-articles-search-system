In the next two sections we will derive mathematical descriptions for both parts. Afterwards we’ll combine all equations into a single state-space model describing our full system. Stay tuned!

(Brushed) DC-motor

Mathematically a brushed DC motor is an electrical network which consists of a motor resistance R (resistance of the coil winding), inductance L and electromotive force Ui which is coupled with rotational speed n. The torque M is proportional to the current i(t). The torque M divided by the radius of the shaft r leads to a driving force F which pulls the cabin up. Formally we have following relations:

Equations of the electromechanical side

First equation is the formal relationship between the current i(t) and the driving torque M. The torque is proportional to the motor’s characteristic k.

The second equation shows the linear relationship between the electromotive force voltage Ui and the rotational speed n(t). The factor between both is again, the motor parameter k.

The third equation describes mechanical dynamics of the motor (mechanical equilibrium). The inertia of the shaft is set to zero since its influence is negligible to the gravitational and inertia forces of the elevator cabin. Note that leaving out the rotational inertia leads to our first approximation where we potentially lose accuracy!

The last equation is a realization of Kirchhoff’s voltage law which is an important link between the force F (over i(t)) and the input voltage u. The input voltage is the input signal of our system, it controls the elevator’s height x.

There is a second more major inaccuracy in our model — the third equation implies that we have a constant r which is not true in the real world, since the radius of the shaft will increase by rope thickness with each additional revolution. But in order to keep the equations simple, we will assume that the rope thickness is negligible relative to the radius of the shaft itself:

Visual example of the radius increase issue. Image source: https://picclick.fr/36mm-Naturelle-Coton-Bannister-Rampe-%C3%89scalier-Corde-X-303031999809.html

Mechanical structure

To realize a relation from F to the height x we will again use the law of mechanical equilibrium:

Driving force F_A is a sum of inertia and gravitation

Gravitational force pulls our cabin down where the driving force tries to pull it up. The inertia force proportional to the vertical acceleration of our elevator.

The connection between the vertical velocity v of the cabin and the rotational speed n(t):

Setting out for state-space

In order to simulate the ODEs above we will combine them in a state-space representation. A state s is a n-dimensional vector (n := number of states) which describes the whole system at each point in time, i.e. we can derive all other variables (included the output variable) given s.

State-space representation

The representation consists of two equations. In the first equation the derivative of s depends on the state itself and an input vector u (in our case it is a scalar, since we have a single input, the voltage of the DC-motor). The second equation shows the output behavior of our system which of course depends on the state of the system and again the input u.

Let’s set up the representation. There are several methods to derive the representation, we will use the simplest one (imho!), since it does not require any knowledge about Laplace-based transfer functions. Our state variables will be variables which lead to energy increase or decrease in our system.

A good rule of thumb is to select variables which cannot jump between different levels. Take x(t) as an example. The lift cabin cannot change its height from 0 to 10m within an infinitely short time period, since this process would also require an infinite amount of electrical power. As you probably remember from your physics lesson the formula for calculating potential energy is

m: mass of the object, g: gravitational acceleration, h: relative height to 0 potential

The second state variable is the vertical velocity of the cabin. The speed also cannot jump from 0 to 10m/s. The reason is the same as above, signals which indicate energy in our system would require infinite power for sudden changes. Additionally there is also a formula for kinetic energy from your physics lesson:

v: vertical velocity

The third state is not that obvious. Until now our energy variables x and v only described the mechanical part. In the electrical circuit we have the next energy storage — inductance L. You cannot change the voltage over the inductance as you can do that with a simple resistor. Thus we introduce i(t) as our third state variable. Here, the equation for magnetic energy:

All other variables in the mechanical and electrical parts introduced above are linearly dependent on the selected state variables. Let’s rearrange the equations, so that on the left side we only have the first derivative of state variable and on the right side everything else (without derivatives).

We will go through the process with the variable i(t):

The derivative of i(t) only depends on the input u(t), the current i(t) and velocity v(t), which are input or state variables respectively.

With a similar approach we get the equations for x and v. All together we have our state-space equation system (1st order ODE):

In matrix form (the general form) — the TL;DR version of this large section:

State-space representation of our elevator example. Note, that because of gravitation our input vector has two elements, the input voltage u(t) and a constant 1 which is multiplied with g.

In other words we have now our state-space matrices:

A: state-matrix, B: input-matrix, C: output-matrix, D: feedforward-matrix

Model in action (with SciPy)

First we import few packages used in this tutorial and initialize system’s parameters:

Let’s define our state-space representation matrices and initialize the StateSpace class:

For our first simulation we want to observe what would happen if we short the input voltage u(t) (i.e. we set it to 0). We define the input vector and simulate with lsim:

Since the signal of our interest (the height x) is the equal to the first state variable, we will use the first state variable from now on in following visualizations.

Let’s observe how our system behaves, we plot the 3-dimensional state vector over time: