How to precisely align face in Python with OpenCv and Dlib Volodymyr Kovenko · Follow 6 min read · Aug 11, 2019 -- 3 Listen Share

Google photo

Introduction

Hello, dear readers! Today, I’d like to share a method of a precise face alignment in python using opencv and dlib. First of all, the code I will further consider was written as the part of a bigger project (which I hope to write article about soon), where it was used as a preprocessing tool. Secondly, the one can wonder, why does he need to read all this stuff about yet another face-alignment application? That’s because this method doesn’t rely on the position of the eyes only, but also depends on the position of the nose, meaning that it’s much more accurate. With all this said let’s get started!

Algorithm

The algorithm consists of 7 stages (the gif describing the method is pinned below).

Nose/eyes detection. Get the central coordinates of each eye and nose. Make a triangle using nose and eyes coordinates, find the median of this triangle. Face detection. Get the coordinates of the centre of a top side of a face rectangle (center of a top side). Make a second triangle using the coordinates of the end of the median, nose coordinates and center of top side coordinates. Find the angle between the median and the side of a second triangle (between black and orange lines). Rotate the endpoint of the median around the nose coordinates with respect to the obtained angle. If rotated point lies in the space of the second triangle (belongs to it), than the final angle (the angle we will use to rotate our image) equals to negative angle. Otherwise final angle equals to our origin angle. Rotate the image by the final angle.

Also the sheme of the algorithm is shown below :

Implementation

The algorithm was implemented in Python using OpenCV and dlib libraries as the main ones. In this article I will describe only the dlib mode of the algorithm, as opencv mode actually does the same job (only with some small changes in a few functions) and dlib is more accurate.

Firtly we need to load the libraries we will use:

import cv2

import numpy as np

from PIL import Image

import dlib

Then, let’s load the dlib detector :

detector = dlib.get_frontal_face_detector()

predictor = dlib.shape_predictor('shape_predictor_5_face_landmarks.dat')



Given an image of a person we can determine eyes and nose coordinates using dlib :

gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)

rects = detector(gray, 0)

if len(rects) > 0:

for rect in rects:

x = rect.left()

y = rect.top()

w = rect.right()

h = rect.bottom()

shape = predictor(gray, rect)

Here we firstly cast our rgb image to grayscale in order to make a prediction on it. After that, if the face was detected we retrive the coordinates of a face rectangle and the shape of our facial landmarks (eyes and nose coordinates).

In order to continue working with facial landmarks we need to cast them to the normal representation. We do it using this two functions :

def shape_to_normal(shape):

shape_normal = []

for i in range(0, 5):

shape_normal.append((i, (shape.part(i).x, shape.part(i).y)))

return shape_normal def get_eyes_nose_dlib(shape):

nose = shape[4][1]

left_eye_x = int(shape[3][1][0] + shape[2][1][0]) // 2

left_eye_y = int(shape[3][1][1] + shape[2][1][1]) // 2

right_eyes_x = int(shape[1][1][0] + shape[0][1][0]) // 2

right_eyes_y = int(shape[1][1][1] + shape[0][1][1]) // 2

return nose, (left_eye_x, left_eye_y), (right_eyes_x, right_eyes_y)

Now we can obtain the central coordinates of nose and eyes :

shape = shape_to_normal(shape)

nose, left_eye, right_eye = get_eyes_nose_dlib(shape)

Let’s find the center of the line between two eyes (endpoint of the median) using this formula:

Midpoint of a line having two coordinates

center_of_forehead = ((left_eye[0] + right_eye[0]) // 2, (left_eye[1] + right_eye[1]) // 2)

Using dlib we had already obtained the coordinates of our face rectangle, now let’s find the center of its top side:

center_pred = (int((x + w) / 2), int((y + y) / 2))

The next thing we do is finding the median of the first triangle along with two other sides of the second triangle (we don’t need to build a first triangle itself as we already know start and end point of the median). Knowing two points (start and end point) we can find the distance between them using this formula :

Distance between two points

def distance(a, b):

return np.sqrt((a[0] - b[0]) ** 2 + (a[1] - b[1]) ** 2)

length_line1(our median), length_line2 — lines between which we need to find the angle.

length_line1 = distance(center_of_forehead, nose)

length_line2 = distance(center_pred, nose)

length_line3 = distance(center_pred, center_of_forehead)

In order to find the angle between two sides of a triangle , knowing three of them, we can use a formula from a cosine rule :

Cosine Rule

def cosine_formula(length_line1, length_line2, length_line3):

cos_a = -(length_line3 ** 2 - length_line2 ** 2 - length_line1 ** 2) / (2 * length_line2 * length_line1)

return cos_a

Let’s retrieve the angle in radians:

cos_a = cosine_formula(length_line1, length_line2, length_line3)

angle = np.arccos(cos_a)

Now in order to understand what the final angle we will use to rotate our image is, we need to rotate the end point of a median and check if it belongs to the space of the second triangle. In order to cope with it, we will use this functions :

def rotate_point(origin, point, angle):

ox, oy = origin

px, py = point



qx = ox + np.cos(angle) * (px - ox) - np.sin(angle) * (py - oy)

qy = oy + np.sin(angle) * (px - ox) + np.cos(angle) * (py - oy)

return qx, qy





def is_between(point1, point2, point3, extra_point):

c1 = (point2[0] - point1[0]) * (extra_point[1] - point1[1]) - (point2[1] - point1[1]) * (extra_point[0] - point1[0])

c2 = (point3[0] - point2[0]) * (extra_point[1] - point2[1]) - (point3[1] - point2[1]) * (extra_point[0] - point2[0])

c3 = (point1[0] - point3[0]) * (extra_point[1] - point3[1]) - (point1[1] - point3[1]) * (extra_point[0] - point3[0])

if (c1 < 0 and c2 < 0 and c3 < 0) or (c1 > 0 and c2 > 0 and c3 > 0):

return True

else:

return False

The function rotate_point — rotates point by an angle around the origin point, while function is_between when given three tops of the triangle and one extra_point checks if the extra point lies in the space of the triangle.

rotated_point = rotate_point(nose, center_of_forehead, angle)

rotated_point = (int(rotated_point[0]), int(rotated_point[1]))

if is_between(nose, center_of_forehead, center_pred, rotated_point):

angle = np.degrees(-angle)

else:

angle = np.degrees(angle)

Knowing the final angle in degrees we can rotate our image using Pillow library or OpenCV :

img = Image.fromarray(img)

img = np.array(img.rotate(angle))

Summary

To sum up, knowing some geometry and open source tools, the one can construct quite a precise face-alignment application.

That’s all guys, if you want to see the overall code, feel free to visit the github page of the project :

Hope this article was useful for you! Thanks for reading and good luck!