Animated Gradient View

Go back to your ViewController and add an instance variable for the EmotionManager we just created and a CAGradientLayer (which will be our gradient).

var emotionManager = EmotionManager()

var gradientView : CAGradientLayer?

Now we want two functions, initialiseGradient() and animateGradient() that will both be called at the end of the viewDidLoad() method.

override func viewDidLoad() {

super.viewDidLoad() guard ARFaceTrackingConfiguration.isSupported else {

fatalError("Face tracking not available on this on this device model!")

} let configuration = ARFaceTrackingConfiguration()

self.trackingView.session.run(configuration)

self.trackingView.delegate = self self.initialiseGradient()

self.animateGradient()

} func initialiseGradient() {

// Create gradient view to take up whole of the background view

self.gradientView = CAGradientLayer() self.gradientView?.startPoint = CGPoint(x: 0, y: 0) // Starts in top left corner

self.gradientView?.endPoint = CGPoint(x: 1, y: 1) // Ends in bottom right corner self.gradientView?.frame = self.view.frame

self.gradientView?.colors = emotionManager.getEmotionColors()

view.layer.insertSublayer(self.gradientView!, at: 0)

} func animateGradient() {

// Animates gradient from current gradient colors to current emotion colors

let colorArray = self.emotionManager.getEmotionColors()

let animation = CABasicAnimation(keyPath: "colors")

animation.duration = 1

animation.fromValue = self.gradientView!.colors

animation.toValue = colorArray

animation.delegate = self

self.gradientView?.add(animation, forKey: nil)

DispatchQueue.main.async {

CATransaction.setDisableActions(true)

self.gradientView?.colors = colorArray

}

}

Now, to begin a new gradient animation once the current animation has finished, creating the endless gradient movement effect, we need to extend CAAnimationDelegate and call animateGradient() from the animationDidStop method.

extension ViewController: CAAnimationDelegate { func animationDidStop(_ anim: CAAnimation, finished flag: Bool) {

DispatchQueue.main.async {

// Run new gradient animation once the previous has finished to create the endless gradient movement effect

self.animateGradient()

}

}

}

Finally, we want to extend the ARSCNViewDelegate and check inside the renderer method for an ARFaceAnchor, which will contain our facial expression data. If we find a face anchor we can then pass it to our emotionManager to check for any active emotions, which will change the colors correspondingly.

extension ViewController: ARSCNViewDelegate { func renderer(_ renderer: SCNSceneRenderer, didUpdate node: SCNNode, for anchor: ARAnchor) {

guard let faceAnchor = anchor as? ARFaceAnchor else { return }

DispatchQueue.main.async {

self.emotionManager.refreshActiveEmotions(for: faceAnchor)

}

}

}

and that’s it!

I hope you’ve enjoyed this tutorial and if you implement it into any of your own projects, or it inspires you to create something similar, then please get in touch because I’d love to see what you’ve made.

Click here for the full source code.