Learning data structures and algorithms can be pretty daunting at first. It’s like learning any new class that has topics you weren’t exposed to before with its own language (kind of like learning organic chemistry or a new game genre). I was originally going to make this an entire post of data structures and algorithms, but it got too long. So, I broke it up here and will begin with data structures and post more later. No worries in terms of finding everything. Once the articles are complete, I’ll insert the links in each article like a double linked list (you’ll get the reference in another post).

Why Learn Data Structures?

Computer software is all about handling data. Data covers all types of information and the more basic forms are numbers and strings. Data structures explain how data is organized. This structure dictates how fast and efficient your code will run. Once you deeply understand how data structures work, your code will run better and be prettier. On the data scientist side, we all write code, but writing good code also opens you up to software engineering opportunities. Surely, learning something that allows you to be good in your own craft while expanding into other lucrative fields can’t be that bad.

The Array Data Structure & 4 Basic Operations

The array is a fundamental data structure. An array is basically a list of data. An example of an array that says Hello is below:

I like learning things by examples of things I already know. So, let’s talk about the array image above. We have the actual data Hello with a space and numbers below it. The numbers below the Hello is known as an index. Think of an index of an array as an address of a home. In that Hello array, H lives in address 0, e lives in address 1. The reason we start the index at 0 is due to most programming languages start an index at 0 — like Python. To learn how data structures like an array affect your code, we have to look at operations. The majority of data structures are applied to these four operations: