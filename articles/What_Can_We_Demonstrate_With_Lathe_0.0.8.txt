What Can We Demonstrate With Lathe 0.0.8?

Lathe 0.0.8 “ Docs and Dispatch” Is a pretty big release on the Lathe canvas. As the name implies, this version came a surplus of documentation. But that’s not all, speed has been prioritized, and most functions are now much more optimized. Additionally, the model constructors now use parametric polymorphism through Julia’s type dispatch, rather than conditionals.

Parametric Polymorphism

If you’re wondering if I’m going to be talking about this concept a lot in general when it comes to functional programming,

Yes, I am.

Parametric Polymorphism in Lathe allows for a much more concise using of the “ predict” function in Lathe as a property of a struct, rather than a function that takes struct input. Needless to say, this is a lot faster, and a lot more concise. But there’s a little more to it than that.

Using this form of parametric polymorphism through Julia’s (awesome) dispatch, we can use the same function to do millions of things, increasingly easily, and without even accessing the codebase.

This means that anyone in their right mind could write extensions for Lathe, and just as well, Lathe could do a lot more than it can now. With Julia’s parametric polymorphism, functions from Lathe can do essentially anything. To give you an idea of just how easy it would be to add structure, let’s do it real quick.

Step one is to import the predict function from Lathe.

Now we could make any constructor whatsoever, or even use a Lathe model and rewrite a function for it.

I chose to name my mutable struct “ Emmett.” The reason I selected this name is still unknown. Next, we construct a variable called emdawg (really?) and we can assert my height and weight. Now that we have my height and weight in a constructor, we could print the individual results.

Cool! So let’s write a function that utilizes this constructor, and then we’ll dispatch it from Lathe.models.predict(). I decided to write a function to calculate BMI, because we have height and weight. One issue is that our height…