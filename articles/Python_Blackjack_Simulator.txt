Python Blackjack Simulator

Background

A computer is an ideal tool to examine the interaction between statistics and strategy. This is because while strategic problems tend to be theoretical, they are also meant to have real world consequences, and these are reflected through statistical outcomes. In many cases, the statistical outcomes are too difficult to study by hand, so it is easier to do a ‘Monte Carlo simulation’, which is several random trials, to try and tease out patterns.

Poker is an extremely complicated game, there are over ten trillion possible hands of poker between two people. This means that current computers have nowhere near enough power to ‘solve’ poker, so they have to frequently use clever Monte Carlo methods. I decided to start off a little simpler, and try to do this for Blackjack.

A special thanks to wizard of odds, whose chart I used to design my strategy function. The code used for this project is on my Github, as it is too long to paste here.

Rules of Blackjack

Blackjack is a game which a player plays against a casino. Both the player and the casino try to get cards that add up to as high a number as possible without crossing 21. Crossing 21 means you automatically lose. If both the player and the casino both cross 21, the casino wins. However, the player can see one of the casino’s cards before making their decision, whereas the casino acts independently of the player’s cards, generally continuing until its score hits 17.

Each numerical card (2–10) is worth its number, an ace is worth 1 or 11, a face card is worth 10. Note that this means there are effectively 4 times as many 10s (10, J, Q,K) as other cards. There are various other caveats, like blackjack bonuses, splits, and doubles, which you can read about at this site.

Various blackjack outcomes and their associated results

Project Overview

This project had three phases: