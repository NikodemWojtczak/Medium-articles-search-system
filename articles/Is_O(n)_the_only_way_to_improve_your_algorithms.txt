Is O(n) the only way to improve your algorithms?

Photo by Patrick Tomasso on Unsplash

Whenever we talk about optimizing code we always discuss the computational complexity of the code.

Is it O(n) or O(n-squared)?

But, sometimes we need to look beyond the algorithm and look at how the algorithm is going to be used in the real world.

In this post, I am going to talk about a similar situation and how I solved it.

The Problem:

Recently I was working with an NLP problem and had to clean up numbers from the text.

On its surface, it feels like a fairly trivial problem. And one could do it using many ways.

I did it in the way given below. The function replaces numbers with #s in a question string.

def clean_numbers(x):

x = re.sub('[0-9]{5,}', '#####', x)

x = re.sub('[0-9]{4}', '####', x)

x = re.sub('[0-9]{3}', '###', x)

x = re.sub('[0-9]{2}', '##', x)

return x

This is all clean code but can we optimize its run time? Think before proceeding further.

The Trick:

The trick to optimize this lies in understanding the objective of the code.

While most of us understand the O(n) paradigm and could always go look for a better algorithm, one of the forgotten ways to optimize your code is to answer a question:

How this code is going to be used?

Do you know, if we just check for a number before subbing strings, we can get a 10x runtime improvement !!!

Since most of the strings won’t have a number, we won’t evaluate 4 function calls to re.sub.

And it takes just one simple if statement.