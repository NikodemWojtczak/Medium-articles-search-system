I’ve been working as an engineer for over a decade now, and still come across the age old “how to test” debate. I’m a Lead Engineer and that means working with my team on how we build things, so I’m always open to competing points of view. But one topic I have become fond of is whether we should use Test Driven Development or TDD. And I think it comes down to a fundamental misunderstanding of why you should enjoy TDD not resent it…

TDD gives me an understanding of what code I should be writing, in a clear focussed way.

For me, TDD is fun. I enjoy coding with tests driving and I can’t imagine why anyone would want to code any other way. I get sad when I can’t figure out how to write a neat test for something. And that brings us to the usual first grievance with TDD — “I can’t just code”. Which is interesting as TDD gives me an understanding of what code I should be writing, in a clear focussed way. Without it I can get lost in edge cases, or refactoring I hadn’t quite intended on. The other thing is that TDD actually lets me “just code”, because I can write any terrifying code I like, as long as the test passes. That freedom is amazing! I write some terrible code to make a test pass, to test my assumptions, prove my method or see if I can over optimise. Taking an example of connecting to a database:

from mocks import mock_database def test_query_database():

expected_customer = {

'id': 32,

'name': 'woof'

} mock_database()

customer = get_customer('woof')

assert customer == expected_customer

Which could be implemented in a number of ways. I quickly put this together:

import database def get_customer(user):

return database.connect().query(f'SELECT id,name FROM customers WHERE name="{user}"').fetch()

TDD allows me to focus on the thing I want my code to achieve. Following the cycle of Red -> Green -> Refactor I can go back at any point to make the code neater:

import database customer_query = 'SELECT id,name FROM customers WHERE name="{}"' def get_customer(user):

conn = database.connect()

cursor = conn.query(customer_query.format(user))

return cursor.fetch()

Tests give you a safety net, that the functionality you wrote before is still running and working.

This proves out the idea of rewriting your code after the tests pass. I often apply a deletion approach to this; if I can delete the code and the tests still pass then I can happily refactor it. I’ve used this technique as a teaching tool as well, by showing people how much extra code they write. Deleting code helps prove that it’s either unneeded or coverage metrics are misleading. Working with an agile mindset of “maximising the work not done”, you should write the least possible code for a test. This constant reduction in code is therapeutic and is in itself a game, adding to the fun! Be aware that it is possible for code to be too costly to test; for example, we initialise frameworks outside of a AWS Lambda handler function. This initialisation is harder to test than the handler because it runs on import. So there is some context for deleting code, but generally some layer of testing can cover everything.

What gets exciting, if I don’t refactor immediately, is that after I have a few test cases my code can still be pretty bad. Refactoring doesn’t always have to happen after every test. Tests give you a safety net, that the functionality you wrote before is still running and working. You can continue down a path to its natural conclusion, without worrying about other things breaking or the in depth refactor you need to do later. By evaluating code, and deleting as much as you can, you can refactor large amounts aggressively with tests protecting you.

Another common grievance is “I have to change all the tests” when making a change. There’s also a few arguments in the land of testing about how much you should test at what level. My personal philosophy is that you should test what you want to achieve. In the case of a data pipeline this might be: pulling a file from S3, doing some work on it, and putting it back in another S3 location. Because I value fun in TDD, these kinds of tests make me much happier to implement than hundreds of unit tests that say the same thing. An example of this data processing test might be:

import pandas

import moto

from pandas.testing import assert_frame_equal from functions.cake_mixer import mix_ingredients @pytest.fixture

def bucket_fixture():

with moto.mock_s3():

s3_resource = boto3.resource("s3")

bucket = s3_resource.Bucket("test")

bucket.create()

yield bucket def test_processing_cake(bucket_fixture):

input_fixture = pandas.read_csv('fixtures/mixture.csv')

output_fixture = pandas.read_csv('fixtures/cake.csv') input_fixture.to_parquet('s3://test/ingredients/mixture.parquet')

mix_ingredients({

'bucket': 'test_bucket',

'mixture_key': 'ingredients/mixture.parquet',

'cake_key': 'cake/chocolate.parquet'

})

output = pandas.read_parquet('s3://test/cake/chocolate.parquet')

assert_frame_equal(output, output_fixture)

Which does quite a lot:

Sets up fixtures for S3

Uploads a test example file

Runs some code to process the example

Reads the resultant file out

Asserts your expected output matches the processed output

This example illustrates the steps you might take in this kind of test. To take this in smaller steps, you could start with processing the data before even involving S3:

import pandas

from pandas.testing import assert_frame_equal from functions.cake_mixer import mix_ingredients def test_processing_cake():

input_fixture = pandas.read_csv('fixtures/mixture.csv')

output_fixture = pandas.read_csv('fixtures/cake.csv') output = mix_ingredients(input_fixture)

assert_frame_equal(output, output_fixture)

You can feel the code coming together as you write an evolving test. Hopefully, this fixes the “I have to change all the tests” problem, because you fulfil only the actual requirements. You’re less vulnerable to tightly coupled units changing. One caveat is that when a unit has a complex set of inputs and outputs, unit tests can help define them.

Importantly, don’t try and implement too much at once, build towards the larger result. Sometimes you want to use multiple loops of tests to help build towards a larger goal. For data pipelines you might write a test for a pipeline, and then a set of smaller tests for each step. Meaning, you can test that outputs of your pipeline and a proof of concept pipeline match. Yet individual stages in the pipeline have tests for specific and explainable transformations. Going from a pandas proof of concept to a large scale Spark data pipeline can use the same end-to-end test data.

Tests are inherently a fun game, where you design your own challenges and then find the best and most pleasing way to complete them.

Finally, people find tests monotonous anyway, and there’s nothing I can do about that. Tests are inherently a fun game, where you design your own challenges and then find the best and most pleasing way to complete them. The best way to make this clearer is to find yourself someone to pair with and work using a ping pong style. In ping pong, one person writes a test and the other makes it pass. Competing to write better tests and better code as they go. The fun is finding ways to make the code do things unexpected, or find edge cases that make your partner to think just a bit more to solve. An example is if you have a function that is meant to return the value passed, you can quite easily write the following:

def test_identity():

assert identity(1) == 1

Which you can quite easily have fun with, as shown here:

def identity(x):

return 1

This means that your partner now has to implement the expected functionality. Next time, the trick might be to check for two different values of x to stop you having too much fun:

def test_identity():

assert identity(1) == 1

assert identity(404) == 404

You’ve covered a couple of additional cases and managed to ensure the code works exactly as you intended.

I’m really hopeful that this post shows you that, rather than being a burden, TDD gives you:

An understanding of the code you’re about to write and what it should do

A safety net for continuing to write terrible code until you want to refactor

Gamification of your work-life, including multiplayer!

So, even if you’ve tried before, try TDD again, because everyone should have more fun :-).